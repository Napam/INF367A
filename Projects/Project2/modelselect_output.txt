Dataframe dimensions:

    df_train: (20699, 3)
    df_val: (1150, 3)
    df_test: (1150, 3)
Fitting models:   0%|          | 0/15 [00:00<?, ?model/s]
Gradient evaluation took 0.005416 seconds
1000 transitions using 10 leapfrog steps per transition would take 54.16 seconds.
Adjust your expectations accordingly!



Gradient evaluation took 0.008799 seconds
1000 transitions using 10 leapfrog steps per transition would take 87.99 seconds.
Adjust your expectations accordingly!



Gradient evaluation took 0.01082 seconds
1000 transitions using 10 leapfrog steps per transition would take 108.2 seconds.
Adjust your expectations accordingly!


Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:
Exception: normal_lpdf: Location parameter is -nan, but must be finite!  (in 'unknown file name' at line 71)

If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,
but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.

Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:
Exception: normal_lpdf: Location parameter is -nan, but must be finite!  (in 'unknown file name' at line 71)

If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,
but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.


Gradient evaluation took 0.011205 seconds
1000 transitions using 10 leapfrog steps per transition would take 112.05 seconds.
Adjust your expectations accordingly!



Gradient evaluation took 0.012718 seconds
1000 transitions using 10 leapfrog steps per transition would take 127.18 seconds.
Adjust your expectations accordingly!



Gradient evaluation took 0.012544 seconds
1000 transitions using 10 leapfrog steps per transition would take 125.44 seconds.
Adjust your expectations accordingly!



Gradient evaluation took 0.012706 seconds
1000 transitions using 10 leapfrog steps per transition would take 127.06 seconds.
Adjust your expectations accordingly!


Iteration:   1 / 1000 [  0%]  (Warmup)

Gradient evaluation took 0.014226 seconds
1000 transitions using 10 leapfrog steps per transition would take 142.26 seconds.
Adjust your expectations accordingly!



Gradient evaluation took 0.013158 seconds
1000 transitions using 10 leapfrog steps per transition would take 131.58 seconds.
Adjust your expectations accordingly!



Gradient evaluation took 0.011555 seconds
1000 transitions using 10 leapfrog steps per transition would take 115.55 seconds.
Adjust your expectations accordingly!


Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:
Exception: multiply: B[960] is -nan, but must not be nan!  (in 'unknown file name' at line 63)

If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,
but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.


Gradient evaluation took 0.012473 seconds
1000 transitions using 10 leapfrog steps per transition would take 124.73 seconds.
Adjust your expectations accordingly!



Gradient evaluation took 0.013288 seconds
1000 transitions using 10 leapfrog steps per transition would take 132.88 seconds.
Adjust your expectations accordingly!


Iteration:   1 / 1000 [  0%]  (Warmup)

Gradient evaluation took 0.01354 seconds
1000 transitions using 10 leapfrog steps per transition would take 135.4 seconds.
Adjust your expectations accordingly!



Gradient evaluation took 0.012629 seconds
1000 transitions using 10 leapfrog steps per transition would take 126.29 seconds.
Adjust your expectations accordingly!



Gradient evaluation took 0.013019 seconds
1000 transitions using 10 leapfrog steps per transition would take 130.19 seconds.
Adjust your expectations accordingly!


Iteration:   1 / 1000 [  0%]  (Warmup)
Iteration:   1 / 1000 [  0%]  (Warmup)
Iteration:   1 / 1000 [  0%]  (Warmup)
Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:
Exception: normal_lpdf: Location parameter is -nan, but must be finite!  (in 'unknown file name' at line 71)

If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,
but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.

Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:
Exception: normal_lpdf: Location parameter is -nan, but must be finite!  (in 'unknown file name' at line 71)

If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,
but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.

Iteration:   1 / 1000 [  0%]  (Warmup)
Iteration:   1 / 1000 [  0%]  (Warmup)
Iteration:   1 / 1000 [  0%]  (Warmup)
Iteration:   1 / 1000 [  0%]  (Warmup)
Iteration:   1 / 1000 [  0%]  (Warmup)
Iteration:   1 / 1000 [  0%]  (Warmup)
Iteration:   1 / 1000 [  0%]  (Warmup)
Iteration:   1 / 1000 [  0%]  (Warmup)
Iteration:   1 / 1000 [  0%]  (Warmup)
Iteration:   1 / 1000 [  0%]  (Warmup)
Iteration: 100 / 1000 [ 10%]  (Warmup)
Iteration: 200 / 1000 [ 20%]  (Warmup)
Iteration: 100 / 1000 [ 10%]  (Warmup)
Iteration: 300 / 1000 [ 30%]  (Warmup)
Iteration: 100 / 1000 [ 10%]  (Warmup)
Iteration: 100 / 1000 [ 10%]  (Warmup)
Iteration: 100 / 1000 [ 10%]  (Warmup)
Iteration: 400 / 1000 [ 40%]  (Warmup)
Iteration: 200 / 1000 [ 20%]  (Warmup)
Iteration: 500 / 1000 [ 50%]  (Warmup)
Iteration: 501 / 1000 [ 50%]  (Sampling)
Iteration: 100 / 1000 [ 10%]  (Warmup)
Iteration: 200 / 1000 [ 20%]  (Warmup)
Iteration: 600 / 1000 [ 60%]  (Sampling)
Iteration: 300 / 1000 [ 30%]  (Warmup)
Iteration: 200 / 1000 [ 20%]  (Warmup)
Iteration: 700 / 1000 [ 70%]  (Sampling)
Iteration: 300 / 1000 [ 30%]  (Warmup)
Iteration: 800 / 1000 [ 80%]  (Sampling)
Iteration: 400 / 1000 [ 40%]  (Warmup)
Iteration: 400 / 1000 [ 40%]  (Warmup)
Iteration: 900 / 1000 [ 90%]  (Sampling)
Iteration: 200 / 1000 [ 20%]  (Warmup)
Iteration: 300 / 1000 [ 30%]  (Warmup)
Iteration: 200 / 1000 [ 20%]  (Warmup)
Iteration: 1000 / 1000 [100%]  (Sampling)

 Elapsed Time: 789.887 seconds (Warm-up)
               454.634 seconds (Sampling)
               1244.52 seconds (Total)

WARNING:pystan:Maximum (flat) parameter count (1000) exceeded: skipping diagnostic tests for n_eff and Rhat.
To run all diagnostics call pystan.check_hmc_diagnostics(fit)
Fitting models:   7%|6         | 1/15 [20:47<4:50:58, 1247.04s/model]Iteration: 500 / 1000 [ 50%]  (Warmup)
Iteration: 501 / 1000 [ 50%]  (Sampling)
Iteration: 500 / 1000 [ 50%]  (Warmup)
Iteration: 501 / 1000 [ 50%]  (Sampling)
Iteration: 600 / 1000 [ 60%]  (Sampling)
Iteration: 600 / 1000 [ 60%]  (Sampling)
Iteration: 400 / 1000 [ 40%]  (Warmup)
Iteration: 700 / 1000 [ 70%]  (Sampling)
Iteration: 300 / 1000 [ 30%]  (Warmup)
Iteration: 300 / 1000 [ 30%]  (Warmup)
Iteration: 800 / 1000 [ 80%]  (Sampling)
Iteration: 700 / 1000 [ 70%]  (Sampling)
Iteration: 800 / 1000 [ 80%]  (Sampling)
Iteration: 900 / 1000 [ 90%]  (Sampling)
Iteration: 100 / 1000 [ 10%]  (Warmup)
Iteration: 500 / 1000 [ 50%]  (Warmup)
Iteration: 501 / 1000 [ 50%]  (Sampling)
Iteration: 100 / 1000 [ 10%]  (Warmup)
Iteration: 400 / 1000 [ 40%]  (Warmup)
Iteration: 400 / 1000 [ 40%]  (Warmup)
Iteration: 900 / 1000 [ 90%]  (Sampling)
Iteration: 1000 / 1000 [100%]  (Sampling)

 Elapsed Time: 1260.18 seconds (Warm-up)
               565.997 seconds (Sampling)
               1826.17 seconds (Total)

WARNING:pystan:Maximum (flat) parameter count (1000) exceeded: skipping diagnostic tests for n_eff and Rhat.
To run all diagnostics call pystan.check_hmc_diagnostics(fit)
Fitting models:  13%|#3        | 2/15 [30:35<3:47:22, 1049.43s/model]Iteration: 600 / 1000 [ 60%]  (Sampling)
Iteration: 100 / 1000 [ 10%]  (Warmup)
Iteration: 1000 / 1000 [100%]  (Sampling)

 Elapsed Time: 1262.79 seconds (Warm-up)
               670.028 seconds (Sampling)
               1932.82 seconds (Total)

WARNING:pystan:Maximum (flat) parameter count (1000) exceeded: skipping diagnostic tests for n_eff and Rhat.
To run all diagnostics call pystan.check_hmc_diagnostics(fit)
Fitting models:  20%|##        | 3/15 [32:17<2:33:04, 765.35s/model] Iteration: 100 / 1000 [ 10%]  (Warmup)
Iteration: 100 / 1000 [ 10%]  (Warmup)
Iteration: 700 / 1000 [ 70%]  (Sampling)
Iteration: 200 / 1000 [ 20%]  (Warmup)
Iteration: 500 / 1000 [ 50%]  (Warmup)
Iteration: 501 / 1000 [ 50%]  (Sampling)
Iteration: 500 / 1000 [ 50%]  (Warmup)
Iteration: 501 / 1000 [ 50%]  (Sampling)
Iteration: 800 / 1000 [ 80%]  (Sampling)
Iteration: 100 / 1000 [ 10%]  (Warmup)
Iteration: 900 / 1000 [ 90%]  (Sampling)
Iteration: 600 / 1000 [ 60%]  (Sampling)
Iteration: 300 / 1000 [ 30%]  (Warmup)
Iteration: 600 / 1000 [ 60%]  (Sampling)
Iteration: 1000 / 1000 [100%]  (Sampling)

 Elapsed Time: 1698.8 seconds (Warm-up)
               728.567 seconds (Sampling)
               2427.36 seconds (Total)

WARNING:pystan:Maximum (flat) parameter count (1000) exceeded: skipping diagnostic tests for n_eff and Rhat.
To run all diagnostics call pystan.check_hmc_diagnostics(fit)
Fitting models:  27%|##6       | 4/15 [40:31<2:05:20, 683.70s/model]Iteration: 700 / 1000 [ 70%]  (Sampling)
Iteration: 200 / 1000 [ 20%]  (Warmup)
Iteration: 200 / 1000 [ 20%]  (Warmup)
Iteration: 400 / 1000 [ 40%]  (Warmup)
Iteration: 200 / 1000 [ 20%]  (Warmup)
Iteration: 800 / 1000 [ 80%]  (Sampling)
Iteration: 300 / 1000 [ 30%]  (Warmup)
Iteration: 200 / 1000 [ 20%]  (Warmup)
Iteration: 500 / 1000 [ 50%]  (Warmup)
Iteration: 501 / 1000 [ 50%]  (Sampling)
Iteration: 100 / 1000 [ 10%]  (Warmup)
Iteration: 400 / 1000 [ 40%]  (Warmup)
Iteration: 900 / 1000 [ 90%]  (Sampling)
Iteration: 700 / 1000 [ 70%]  (Sampling)
Iteration: 300 / 1000 [ 30%]  (Warmup)
Iteration: 500 / 1000 [ 50%]  (Warmup)
Iteration: 501 / 1000 [ 50%]  (Sampling)
Iteration: 1000 / 1000 [100%]  (Sampling)

 Elapsed Time: 2113.99 seconds (Warm-up)
               850.596 seconds (Sampling)
               2964.59 seconds (Total)

WARNING:pystan:Maximum (flat) parameter count (1000) exceeded: skipping diagnostic tests for n_eff and Rhat.
To run all diagnostics call pystan.check_hmc_diagnostics(fit)
Fitting models:  33%|###3      | 5/15 [49:29<1:46:42, 640.24s/model]Iteration: 600 / 1000 [ 60%]  (Sampling)
Iteration: 700 / 1000 [ 70%]  (Sampling)
Iteration: 800 / 1000 [ 80%]  (Sampling)
Iteration: 600 / 1000 [ 60%]  (Sampling)
Iteration: 900 / 1000 [ 90%]  (Sampling)
Iteration: 400 / 1000 [ 40%]  (Warmup)
Iteration: 800 / 1000 [ 80%]  (Sampling)
Iteration: 1000 / 1000 [100%]  (Sampling)

 Elapsed Time: 2954.18 seconds (Warm-up)
               299.495 seconds (Sampling)
               3253.68 seconds (Total)

WARNING:pystan:Maximum (flat) parameter count (1000) exceeded: skipping diagnostic tests for n_eff and Rhat.
To run all diagnostics call pystan.check_hmc_diagnostics(fit)
Fitting models:  40%|####      | 6/15 [54:15<1:20:04, 533.85s/model]Iteration: 200 / 1000 [ 20%]  (Warmup)
Iteration: 300 / 1000 [ 30%]  (Warmup)
Iteration: 900 / 1000 [ 90%]  (Sampling)
Iteration: 100 / 1000 [ 10%]  (Warmup)
Iteration: 500 / 1000 [ 50%]  (Warmup)
Iteration: 501 / 1000 [ 50%]  (Sampling)
Iteration: 1000 / 1000 [100%]  (Sampling)

 Elapsed Time: 2127.91 seconds (Warm-up)
               1428.94 seconds (Sampling)
               3556.85 seconds (Total)

WARNING:pystan:Maximum (flat) parameter count (1000) exceeded: skipping diagnostic tests for n_eff and Rhat.
To run all diagnostics call pystan.check_hmc_diagnostics(fit)
Fitting models:  47%|####6     | 7/15 [59:18<1:01:57, 464.65s/model]Iteration: 700 / 1000 [ 70%]  (Sampling)
Iteration: 300 / 1000 [ 30%]  (Warmup)
Iteration: 400 / 1000 [ 40%]  (Warmup)
Iteration: 600 / 1000 [ 60%]  (Sampling)
Iteration: 800 / 1000 [ 80%]  (Sampling)
Iteration: 400 / 1000 [ 40%]  (Warmup)
Iteration: 700 / 1000 [ 70%]  (Sampling)
Iteration: 100 / 1000 [ 10%]  (Warmup)
Iteration: 300 / 1000 [ 30%]  (Warmup)
Iteration: 500 / 1000 [ 50%]  (Warmup)
Iteration: 501 / 1000 [ 50%]  (Sampling)
Iteration: 800 / 1000 [ 80%]  (Sampling)
Iteration: 900 / 1000 [ 90%]  (Sampling)
Iteration: 500 / 1000 [ 50%]  (Warmup)
Iteration: 501 / 1000 [ 50%]  (Sampling)
Iteration: 900 / 1000 [ 90%]  (Sampling)
Iteration: 600 / 1000 [ 60%]  (Sampling)
Iteration: 200 / 1000 [ 20%]  (Warmup)
Iteration: 600 / 1000 [ 60%]  (Sampling)
Iteration: 1000 / 1000 [100%]  (Sampling)

 Elapsed Time: 2713.08 seconds (Warm-up)
               2305.57 seconds (Sampling)
               5018.65 seconds (Total)

WARNING:pystan:Maximum (flat) parameter count (1000) exceeded: skipping diagnostic tests for n_eff and Rhat.
To run all diagnostics call pystan.check_hmc_diagnostics(fit)
Fitting models:  53%|#####3    | 8/15 [1:23:44<1:29:13, 764.85s/model]Iteration: 700 / 1000 [ 70%]  (Sampling)
Iteration: 1000 / 1000 [100%]  (Sampling)

 Elapsed Time: 3543.25 seconds (Warm-up)
               1597.26 seconds (Sampling)
               5140.51 seconds (Total)

WARNING:pystan:Maximum (flat) parameter count (1000) exceeded: skipping diagnostic tests for n_eff and Rhat.
To run all diagnostics call pystan.check_hmc_diagnostics(fit)
Fitting models:  60%|######    | 9/15 [1:25:43<57:08, 571.36s/model]  Iteration: 700 / 1000 [ 70%]  (Sampling)
Iteration: 400 / 1000 [ 40%]  (Warmup)
Iteration: 800 / 1000 [ 80%]  (Sampling)
Iteration: 800 / 1000 [ 80%]  (Sampling)
Iteration: 900 / 1000 [ 90%]  (Sampling)
Iteration: 900 / 1000 [ 90%]  (Sampling)
Iteration: 1000 / 1000 [100%]  (Sampling)

 Elapsed Time: 4374.95 seconds (Warm-up)
               1707.47 seconds (Sampling)
               6082.42 seconds (Total)

WARNING:pystan:Maximum (flat) parameter count (1000) exceeded: skipping diagnostic tests for n_eff and Rhat.
To run all diagnostics call pystan.check_hmc_diagnostics(fit)
Fitting models:  67%|######6   | 10/15 [1:41:27<56:54, 682.92s/model]Iteration: 1000 / 1000 [100%]  (Sampling)

 Elapsed Time: 4630.96 seconds (Warm-up)
               1559.41 seconds (Sampling)
               6190.37 seconds (Total)

WARNING:pystan:Maximum (flat) parameter count (1000) exceeded: skipping diagnostic tests for n_eff and Rhat.
To run all diagnostics call pystan.check_hmc_diagnostics(fit)
Fitting models:  73%|#######3  | 11/15 [1:43:16<34:03, 510.78s/model]Iteration: 500 / 1000 [ 50%]  (Warmup)
Iteration: 501 / 1000 [ 50%]  (Sampling)
Iteration: 200 / 1000 [ 20%]  (Warmup)
Iteration: 300 / 1000 [ 30%]  (Warmup)
Iteration: 600 / 1000 [ 60%]  (Sampling)
Iteration: 200 / 1000 [ 20%]  (Warmup)
Iteration: 700 / 1000 [ 70%]  (Sampling)
Iteration: 400 / 1000 [ 40%]  (Warmup)
Iteration: 800 / 1000 [ 80%]  (Sampling)
Iteration: 300 / 1000 [ 30%]  (Warmup)
Iteration: 900 / 1000 [ 90%]  (Sampling)
Iteration: 500 / 1000 [ 50%]  (Warmup)
Iteration: 501 / 1000 [ 50%]  (Sampling)
Iteration: 1000 / 1000 [100%]  (Sampling)

 Elapsed Time: 6250.38 seconds (Warm-up)
               3857.78 seconds (Sampling)
               10108.2 seconds (Total)

WARNING:pystan:Maximum (flat) parameter count (1000) exceeded: skipping diagnostic tests for n_eff and Rhat.
To run all diagnostics call pystan.check_hmc_diagnostics(fit)
Fitting models:  80%|########  | 12/15 [2:48:33<1:16:38, 1532.78s/model]Iteration: 300 / 1000 [ 30%]  (Warmup)
Iteration: 400 / 1000 [ 40%]  (Warmup)
Iteration: 600 / 1000 [ 60%]  (Sampling)
Iteration: 700 / 1000 [ 70%]  (Sampling)
Iteration: 400 / 1000 [ 40%]  (Warmup)
Iteration: 500 / 1000 [ 50%]  (Warmup)
Iteration: 501 / 1000 [ 50%]  (Sampling)
Iteration: 800 / 1000 [ 80%]  (Sampling)
Iteration: 600 / 1000 [ 60%]  (Sampling)
Iteration: 500 / 1000 [ 50%]  (Warmup)
Iteration: 501 / 1000 [ 50%]  (Sampling)
Iteration: 900 / 1000 [ 90%]  (Sampling)
Iteration: 700 / 1000 [ 70%]  (Sampling)
Iteration: 1000 / 1000 [100%]  (Sampling)

 Elapsed Time: 9890.64 seconds (Warm-up)
               7701.54 seconds (Sampling)
               17592.2 seconds (Total)

WARNING:pystan:Maximum (flat) parameter count (1000) exceeded: skipping diagnostic tests for n_eff and Rhat.
To run all diagnostics call pystan.check_hmc_diagnostics(fit)
Fitting models:  87%|########6 | 13/15 [4:53:20<1:50:38, 3319.01s/model]Iteration: 600 / 1000 [ 60%]  (Sampling)
Iteration: 800 / 1000 [ 80%]  (Sampling)
Iteration: 700 / 1000 [ 70%]  (Sampling)
Iteration: 900 / 1000 [ 90%]  (Sampling)
Iteration: 800 / 1000 [ 80%]  (Sampling)
Iteration: 1000 / 1000 [100%]  (Sampling)

 Elapsed Time: 12985.4 seconds (Warm-up)
               10725.5 seconds (Sampling)
               23710.9 seconds (Total)

WARNING:pystan:Maximum (flat) parameter count (1000) exceeded: skipping diagnostic tests for n_eff and Rhat.
To run all diagnostics call pystan.check_hmc_diagnostics(fit)
Fitting models:  93%|#########3| 14/15 [6:35:22<1:09:19, 4159.76s/model]Iteration: 900 / 1000 [ 90%]  (Sampling)
Iteration: 1000 / 1000 [100%]  (Sampling)

 Elapsed Time: 15439.9 seconds (Warm-up)
               10702 seconds (Sampling)
               26141.9 seconds (Total)

WARNING:pystan:Maximum (flat) parameter count (1000) exceeded: skipping diagnostic tests for n_eff and Rhat.
To run all diagnostics call pystan.check_hmc_diagnostics(fit)
Fitting models: 100%|##########| 15/15 [7:15:54<00:00, 3641.58s/model]  Fitting models: 100%|##########| 15/15 [7:15:54<00:00, 1743.64s/model]Using cached StanModel
/usr/lib/python3.6/multiprocessing/reduction.py:51: UserWarning: Pickling fit objects is an experimental feature!
The relevant StanModel instance must be pickled along with this fit object.
When unpickling the StanModel must be unpickled first.
  cls(buf, protocol).dump(obj)
Using cached StanModel
/usr/lib/python3.6/multiprocessing/reduction.py:51: UserWarning: Pickling fit objects is an experimental feature!
The relevant StanModel instance must be pickled along with this fit object.
When unpickling the StanModel must be unpickled first.
  cls(buf, protocol).dump(obj)
Using cached StanModel
/usr/lib/python3.6/multiprocessing/reduction.py:51: UserWarning: Pickling fit objects is an experimental feature!
The relevant StanModel instance must be pickled along with this fit object.
When unpickling the StanModel must be unpickled first.
  cls(buf, protocol).dump(obj)
Using cached StanModel
/usr/lib/python3.6/multiprocessing/reduction.py:51: UserWarning: Pickling fit objects is an experimental feature!
The relevant StanModel instance must be pickled along with this fit object.
When unpickling the StanModel must be unpickled first.
  cls(buf, protocol).dump(obj)
Using cached StanModel
Using cached StanModel
/usr/lib/python3.6/multiprocessing/reduction.py:51: UserWarning: Pickling fit objects is an experimental feature!
The relevant StanModel instance must be pickled along with this fit object.
When unpickling the StanModel must be unpickled first.
  cls(buf, protocol).dump(obj)
/usr/lib/python3.6/multiprocessing/reduction.py:51: UserWarning: Pickling fit objects is an experimental feature!
The relevant StanModel instance must be pickled along with this fit object.
When unpickling the StanModel must be unpickled first.
  cls(buf, protocol).dump(obj)
Using cached StanModel
/usr/lib/python3.6/multiprocessing/reduction.py:51: UserWarning: Pickling fit objects is an experimental feature!
The relevant StanModel instance must be pickled along with this fit object.
When unpickling the StanModel must be unpickled first.
  cls(buf, protocol).dump(obj)
Using cached StanModel
/usr/lib/python3.6/multiprocessing/reduction.py:51: UserWarning: Pickling fit objects is an experimental feature!
The relevant StanModel instance must be pickled along with this fit object.
When unpickling the StanModel must be unpickled first.
  cls(buf, protocol).dump(obj)
Using cached StanModel
/usr/lib/python3.6/multiprocessing/reduction.py:51: UserWarning: Pickling fit objects is an experimental feature!
The relevant StanModel instance must be pickled along with this fit object.
When unpickling the StanModel must be unpickled first.
  cls(buf, protocol).dump(obj)
Using cached StanModel
/usr/lib/python3.6/multiprocessing/reduction.py:51: UserWarning: Pickling fit objects is an experimental feature!
The relevant StanModel instance must be pickled along with this fit object.
When unpickling the StanModel must be unpickled first.
  cls(buf, protocol).dump(obj)
Using cached StanModel
/usr/lib/python3.6/multiprocessing/reduction.py:51: UserWarning: Pickling fit objects is an experimental feature!
The relevant StanModel instance must be pickled along with this fit object.
When unpickling the StanModel must be unpickled first.
  cls(buf, protocol).dump(obj)
Using cached StanModel
/usr/lib/python3.6/multiprocessing/reduction.py:51: UserWarning: Pickling fit objects is an experimental feature!
The relevant StanModel instance must be pickled along with this fit object.
When unpickling the StanModel must be unpickled first.
  cls(buf, protocol).dump(obj)

/home/napha/INF367A/stanenv/lib/python3.6/site-packages/pandas/io/pickle.py:88: UserWarning: Pickling fit objects is an experimental feature!
The relevant StanModel instance must be pickled along with this fit object.
When unpickling the StanModel must be unpickled first.
  f.write(pickle.dumps(obj, protocol=protocol))
evaltime:  26154.78601861
